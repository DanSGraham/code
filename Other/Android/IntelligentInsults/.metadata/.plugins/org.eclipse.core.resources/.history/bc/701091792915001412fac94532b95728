package com.example.insultstest;

import java.util.List;
import java.util.Random;
import java.util.Map;
import android.support.v7.app.ActionBarActivity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.widget.FrameLayout;
import android.widget.TextView;


public class InsultsTest extends ActionBarActivity {
	
	public List<String> selectedTypes;
	public List<String[][]> selectedCategories;
	
    private String[][] shakespeare = {
    		{"shakespeare"},
    		{"shakespearenoun"},
    		{"shakespeareverb"},
    		{"shakespearephrase"}
    };
    private String[][] english = {
    		{"english"},
    		{"englishnoun"},
    		{"englishverb"},
    		{"englishphrase"}
    };
    private String[][] science = {
    		{"science"},
    		{"sciencenoun"},
    		{"scienceverb"},
    		{"sciencephrase"}
    };
	//Use hash map
	
	public List<String> insultTypes;
	public Map<String[][], Boolean> insultCategories;
	insultTypes.add("Noun");
	insultTypes.put("Verb", true);
	insultTypes.put("Phrase", true);

	String[][][] allInsultCategories = new String[][][]{shakespeare, english, science};
	
	insultCategories = new HashMap();
	for (int i = 0; i < allInsultCategories.length; i++){
		insultCategories.put(allInsultCategories[i], true);
	}
	
    public static int randInt(int min, int max){

        Random rand = new Random();

        int randomNum = rand.nextInt((max-min) +1) + min;

        return randomNum;
    }
    
    public int returnInsultType(Map<String, Boolean> insultTypes){
    	if (insultTypes.size().equals(0)){
    		return new String[][] {
    				{"VOID"},
    				{"VOID"},
    		};
    	}
    	while (true){
    		int typeInt = randInt(0,insultTypes.size() - 1);
    		switch (typeInt){
    		case 0:
    			if (insultTypes.get("Noun")){
    				return typeInt;
    			}
    			break;
    		case 1:
    			if (insultTypes.get("Verb")){
    				return typeInt;
    			}
    			break;
    		case 2:
    			if (insultTypes.get("Phrase")){
    				return typeInt;
    			}
    			break;
    			}
    		}
    }
    	
    public String[][] returnInsultCategory(Map<String[][], Boolean> insultsCategory){
    	if (insultsCategory.size().equals(0)){
    		return new String[][] {
    				{"VOID"},
    				{"VOID"},
    		};
    	}
    	int catInt = randInt(0,insultsCategory.size() - 1);
    	while (true){
    		String[][] tempCat = (String [][]) insultsCategory.keySet().toArray()[catInt];
    		if (insultsCategory.get(tempCat)){
    			return tempCat;
    		}
    	}	
    }
    
    public void updateSelectedLists(){
    	selectedTypes.clear();
    	selectedCategories.clear();
    	SharedPreferences allPreferences = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    	for(String type : insultTypes)
    }
 /*  
    private String selectInsultCategory(String[] arrayOfSelected){
    	boolean whileGo = true;
    	while (whileGo){
    		int insultCategory = randInt(0,numCategories - 1);
    		switch(insultCategory){
    		case
    		}
    	}
    }
    private String selectInsultType(String[] arrayOfSelected){
    	boolean whileGo = true
    	while (whileGo){
    		int insultType = randInt(0,numTypes-1);
    		switch(insultType){
    		case 0:
    			if (Arrays.asList(arrayOfSelected).contains("Noun")){
    				int insultCat = randInt(0,numCategories - 1);
    				
    			}
    		}
    	}
    		
    }
 */   

    //private String[] insults = {"INSULT HERE"};
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	
    	super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_insults_test);
        TextView newInsult = (TextView)findViewById(R.id.newInsult);
        View homepage = findViewById(R.id.insultsHomepage);
        SharedPreferences allPreferences = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
        
        for(Map.Entry<String,Boolean> eachType : insultTypes.entrySet()){
        	if (eachType.getValue()){
        		selectedTypes.add(eachType.getKey());
        	}
        }
        /*
        boolean Nouns = allPreferences.getBoolean("nounInsults", true);
        boolean Verbs = allPreferences.getBoolean("verbInsults", true);
        boolean Phrases = allPreferences.getBoolean("phraseInsults", true);
        boolean Shakespeare = allPreferences.getBoolean("shakespeareInsults", true);
        boolean Science = allPreferences.getBoolean("scienceInsults", true);
        boolean English = allPreferences.getBoolean("englishInsults", true);
        if (Nouns){
        	insultTypes.add("Noun");
        }
        if (Verbs){
        	insultTypes.add("Verb");
        }
        if (Phrases){
        	insultTypes.add("Phrase");
        }
        for (int i = 0; i < allInsultCategories.length; i++){
        	//FIX THE FOLLOWING.
        	if (insultCategories.get(i)){
        		
        	}
        }
        if (Science){
        	insults = concatString(insults, science);
        }
        
        if (English){
        	insults = concatString(insults, english);
        }
        
        insults = concatString(insults, someInsults);
        */
        int firstInsultNum = randInt(0,insults.length - 1);
        String insult = insults[firstInsultNum];
        newInsult.setText(insult);
        homepage.setOnLongClickListener(new OnLongClickListener() {
            public boolean onLongClick(View arg0) {
            	//HERE WE USE Intent to start preference activity.
            	Intent myIntent = new Intent(InsultsTest.this, OpenPreferences.class);
            	startActivity(myIntent);
                return true;                         
            }
        });
            
        
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.insults_test, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    public void showInsult(View view){
    	 int firstInsultNum = randInt(0,insults.length - 1);
         String insult = insults[firstInsultNum];
    	 TextView newInsult = (TextView)findViewById(R.id.newInsult);
         newInsult.setText(insult);
    }
    
}
